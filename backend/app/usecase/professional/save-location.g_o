package professional_usecase

import (
	pkgprofessional "construir_mais_barato/app/domain/professional"
	pkguser "construir_mais_barato/app/domain/user"
	pkguseruc "construir_mais_barato/app/usecase/user"

	"fmt"
	"time"
)

type SaveProfessionalLocationUC struct {
	Service     pkgprofessional.ProfessionalService
	ServiceUser pkguser.UserService
	Assembler   *ProfessionalAssembler
}

type SaveProfessionalLocationUCParams struct {
	Service     pkgprofessional.ProfessionalService
	ServiceUser pkguser.UserService
}

func NewSaveProfessionalLocationUC(params SaveProfessionalLocationUCParams) SaveProfessionalLocationUC {
	return SaveProfessionalLocationUC{
		Service:     params.Service,
		ServiceUser: params.ServiceUser,
	}
}

func (uc *SaveProfessionalLocationUC) Execute() (*ProfessionalPresenter, error) {

	if uc.Assembler == nil {
		return nil, fmt.Errorf("invalid Data")
	}

	professional := GenerateProfessional(uc.Assembler)

	fmt.Println(professional)

	professionalSaved, err := uc.Service.Save(professional)
	if err != nil {
		return nil, err
	}

	// pesquisar o usuário pelo email
	findEmailUSerUC := pkguseruc.NewFindByEmailUC(pkguseruc.FindByEmailUCParams{
		Service: uc.ServiceUser,
	})
	findEmailUSerUC.Email = &uc.Assembler.Email
	user, _ := findEmailUSerUC.Execute()
	// fmt.Println("Encontrou usuário pelo email ==> ", user)
	userAssembler := pkguseruc.UserAssembler{}
	/*fmt.Println("USER-------");
	fmt.Println(user);
	fmt.Println("Senha registro-------");
	fmt.Println(uc.Assembler.Password);
	fmt.Println("-------");
	*/


	if user != nil {
		/*fmt.Println("Senha User-------");
		fmt.Println(user.Password);
		fmt.Println("-------");
		*/
		// encontrou usuário cadastrado então devo atualizar o usuário
		// criar o usuário com base nos dados que o profissional informou para fazer o login no sistema
		userAssembler.ID = user.ID
		userAssembler.Name = professionalSaved.Name
		userAssembler.Email = professionalSaved.Email
		//userAssembler.Password = user.Password
		userAssembler.Profile = "profissional"

	} else {

		// criar o usuário com base nos dados que o profissional informou para fazer o login no sistema
		userAssembler.Name = uc.Assembler.Name
		userAssembler.Email = uc.Assembler.Email
		userAssembler.Profile = "profissional"
		if uc.Assembler.Password == "" {

			// Obtém a data e hora atual
			now := time.Now()

			// Converte `time.Time` para string com formatação
			formattedTime := now.Format("2006-01-02 15:04:05")

			userAssembler.Password = formattedTime
		} else {
			userAssembler.Password = uc.Assembler.Password
		}
	}

	// caso de uso para salvar usuários
	ucUserParams := pkguseruc.SaveUserUCParams{
		Service: uc.ServiceUser,
	}
	ucUser := pkguseruc.NewSaveUserUC(ucUserParams)
	ucUser.Assembler = &userAssembler
	_, err = ucUser.Execute()
	if err != nil {
		fmt.Println("Erro ao salvar o usuário criado para o profissional =>  " + err.Error())
		return nil, err
	}

	userPresenter := GenerateProfessionalPresenter(professionalSaved)

	return &userPresenter, nil

}
